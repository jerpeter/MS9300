/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Driver for TI TPS25750 USB Power Delivery controller family
 *
 * Copyright (C) 2023, Geotab Inc.
 * Author: Abdel Alkuor <abdelalkuor@geotab.com>
 */

#ifndef __TPS25750_H__
#define __TPS25750_H__

/* events 1-4 */
#define TPS_REG_EVENT1_PD_HARD_RESET			(1 << 1)
#define TPS_REG_EVENT1_PLUG_INSERT_OR_REMOVAL	(1 << 3)
#define TPS_REG_EVENT1_PR_SWAP_COMPLETE			(1 << 4)
#define TPS_REG_EVENT1_DR_SWAP_COMPLETE			(1 << 5)
#define TPS_REG_EVENT1_NEW_CONTRACT_AS_CONS		(1 << 12)
#define TPS_REG_EVENT1_NEW_CONTRACT_AS_PROV		(1 << 13)
#define TPS_REG_EVENT1_SOURCE_CAP_MSG_RCVD		(1 << 14)
#define TPS_REG_EVENT1_PR_SWAP_REQUESTED		(1 << 17)
#define TPS_REG_EVENT1_DR_SWAP_REQUESTED		(1 << 18)
#define TPS_REG_EVENT1_USB_HOST_PRESENT			(1 << 20)
#define TPS_REG_EVENT1_USB_HOST_PRESENT_NO_LONGER	(1 << 21)
#define TPS_REG_EVENT1_PP_SWITCH_CHANGED		(1 << 23)
#define TPS_REG_EVENT1_POWER_STATUS_UPDATE		(1 << 24)
#define TPS_REG_EVENT1_STATUS_UPDATE			(1 << 26)
#define TPS_REG_EVENT1_PD_STATUS_UPDATE			(1 << 27)
#define TPS_REG_EVENT1_CMD_COMPLETE				(1 << 30)

/* events 5-8 */
#define TPS_REG_EVENT1_ERROR_DEVICE_INCOMPLETE						(1 << 0)
#define TPS_REG_EVENT1_ERROR_CANNOT_PROVIDE_VOLATAGE_OR_CURRENT		(1 << 1)
#define TPS_REG_EVENT1_ERROR_CAN_PROVIDE_VOLATAGE_OR_CURRENT_LATER	(1 << 2)
#define TPS_REG_EVENT1_ERROR_POWER_EVENT_OCCURRED					(1 << 3)
#define TPS_REG_EVENT1_ERROR_MISSING_GET_CAP_MESSAGE				(1 << 4)
#define TPS_REG_EVENT1_ERROR_PROTOCOL_ERROR							(1 << 6)
#define TPS_REG_EVENT1_ERROR_MESSAGAE_DATA							(1 << 7)
#define TPS_REG_EVENT1_SINK_TRANSITION_COMPLETE						(1 << 9)
#define TPS_REG_EVENT1_PLUG_EARLY_NOTIFICATION						(1 << 10)
#define TPS_REG_EVENT1_ERROR_PLUG_EARLY_NOTIFICATION				(1 << 11)
#define TPS_REG_EVENT1_ERROR_UNABLE_TO_SOURCE						(1 << 14)

/* events 9-11 */
#define TPS_REG_EVENT1_TX_MEM_BUFFER_EMPTY	(1 << 1)
#define TPS_REG_EVENT1_PATCH_LOADED			(1 << 16)
#define TPS_REG_EVENT1_READY_FOR_PATCH		(1 << 17)
#define TPS_REG_EVENT1_I2C_MASTER_NACKED	(1 << 18)

/* STATUS Register */
#define TPS_REG_STATUS_PLUG_MASK		(1 << 0)
#define TPS_REG_STATUS_PLUG_POS			(0)
#define TPS_REG_STATUS_PLUG_PRESENT(_s)	((TPS_REG_STATUS_PLUG_MASK & _s) >> TPS_REG_STATUS_PLUG_POS)
#define TPS_REG_STATUS_CONN_STATE_MASK		((1 << 3) | (1 << 2) | (1 << 1))
#define TPS_REG_STATUS_CONN_STATE_POS		(1)
#define TPS_REG_STATUS_CONN_STATE(_s)	((TPS_REG_STATUS_CONN_STATE_MASK & _s) >> TPS_REG_STATUS_CONN_STATE_POS)
#define TPS_REG_STATUS_PLUG_ORIENTATION_MASK	(1 << 4)
#define TPS_REG_STATUS_PLUG_ORIENTATION_POS	(4)
#define TPS_REG_STATUS_PLUG_ORIENTATION(_s)	((TPS_REG_STATUS_PLUG_ORIENTATION_MASK & _s) >> TPS_REG_STATUS_PLUG_ORIENTATION_POS)
#define TPS_REG_STATUS_PORT_ROLE_MASK		(1 << 5)
#define TPS_REG_STATUS_PORT_ROLE_POS		(5)
#define TPS_REG_STATUS_PORT_ROLE(_s)	((TPS_REG_STATUS_PORT_ROLE_MASK & _s) >> TPS_REG_STATUS_PORT_ROLE_POS)
#define TPS_REG_STATUS_DATA_ROLE_MASK		(1 << 6)
#define TPS_REG_STATUS_DATA_ROLE_POS		(6)
#define TPS_REG_STATUS_DATA_ROLE(_s)	((TPS_REG_STATUS_DATA_ROLE_MASK & _s) >> TPS_REG_STATUS_DATA_ROLE_POS)
#define TPS_REG_STATUS_VBUS_STATUS_MASK		((1 << 21) | (1 << 20))
#define TPS_REG_STATUS_VBUS_STATUS_POS		(20)
#define TPS_REG_STATUS_VBUS_STATUS(_s)	((TPS_REG_STATUS_VBUS_STATUS_MASK & _s) >> TPS_REG_STATUS_VBUS_STATUS_POS)
#define TPS_REG_STATUS_USB_HOST_PRESENT_MASK	((1 << 23) | (1 << 22))
#define TPS_REG_STATUS_USB_HOST_PRESENT_POS		(22)
#define TPS_REG_STATUS_USB_HOST_PRESENT(_s)	((TPS_REG_STATUS_USB_HOST_PRESENT_MASK & _s) >> TPS_REG_STATUS_USB_HOST_PRESENT_POS)
#define TPS_REG_STATUS_ACTING_AS_LEGACY_MASK	((1 << 25) | (1 << 24))
#define TPS_REG_STATUS_ACTING_AS_LEGACY_POS		(24)
#define TPS_REG_STATUS_ACTING_AS_LEGACY(_s)	((TPS_REG_STATUS_ACTING_AS_LEGACY_MASK &_s) >> TPS_REG_STATUS_ACTING_AS_LEGACY_POS)
#define TPS_REG_STATUS_BIST_MASK		(1 << 27)
#define TPS_REG_STATUS_BIST_POS			(27)
#define TPS_REG_STATUS_BIST(_s)	((TPS_REG_STATUS_BIST_MASK & _s) >> TPS_REG_STATUS_BIST_POS)

/* BOOT STATUS REG */
#define TPS_REG_BOOT_STATUS_PATCH_HEADER_ERR_MASK	(1 << 0)
#define TPS_REG_BOOT_STATUS_PATCH_HEADER_ERR_POS	(0)
#define TPS_REG_BOOT_STATUS_PATCH_HEADER_ERR(_s)	((TPS_REG_BOOT_STATUS_PATCH_HEADER_ERR_MASK & _s) >> TPS_REG_BOOT_STATUS_PATCH_HEADER_ERR_POS)
#define TPS_REG_BOOT_STATUS_DEAD_BATTERY_FLAG_MASK	(1 << 2)
#define TPS_REG_BOOT_STATUS_DEAD_BATTERY_FLAG_POS	(2)
#define TPS_REG_BOOT_STATUS_DEAD_BATTERY_FLAG(_s)	((TPS_REG_BOOT_STATUS_DEAD_BATTERY_FLAG_MASK & _s) >> TPS_REG_BOOT_STATUS_DEAD_BATTERY_FLAG_POS)
#define TPS_REG_BOOT_STATUS_I2C_EEPROM_PRESENT_MASK	(1 << 3)
#define TPS_REG_BOOT_STATUS_I2C_EEPROM_PRESENT_POS	(3)
#define TPS_REG_BOOT_STATUS_I2C_EEPROM_PRESENT(_s)	((TPS_REG_BOOT_STATUS_I2C_EEPROM_PRESENT_MASK & _s) >> TPS_REG_BOOT_STATUS_I2C_EEPROM_PRESENT_POS)
#define TPS_REG_BOOT_STATUS_PATCH_DOWNLOAD_ERR_MASK	(1 << 10)
#define TPS_REG_BOOT_STATUS_PATCH_DOWNLOAD_ERR_POS	(10)
#define TPS_REG_BOOT_STATUS_PATCH_DOWNLOAD_ERR(_s)	((TPS_REG_BOOT_STATUS_PATCH_DOWNLOAD_ERR_MASK & _s) >> TPS_REG_BOOT_STATUS_PATCH_DOWNLOAD_ERR_POS)
#define TPS_REG_BOOT_STATUS_MASTER_TSD_MASK		(1 << 19)
#define TPS_REG_BOOT_STATUS_MASTER_TSD_POS		(19)
#define TPS_REG_BOOT_STATUS_MASTER_TSD(_s)	((TPS_REG_BOOT_STATUS_MASTER_TSD_MASK & _s) >> TPS_REG_BOOT_STATUS_MASTER_TSD_POS)
#define TPS_REG_BOOT_STATUS_PATCH_CONFIG_SOURCE_MASK	((1 << 31) | (1 << 30) | (1 << 29))
#define TPS_REG_BOOT_STATUS_PATCH_CONFIG_SOURCE_POS		(29)
#define TPS_REG_BOOT_STATUS_PATCH_CONFIG_SOURCE(_s)	((TPS_REG_BOOT_STATUS_PATCH_CONFIG_SOURCE_MASK & _s) >> TPS_REG_BOOT_STATUS_PATCH_CONFIG_SOURCE_POS)
#define TPS_REG_BOOT_STATUS_REV_ID_MASK			((1 << 39) | (1 << 38) | (1 << 37) | (1 << 36) | (1 << 35) | (1 << 34) | (1 << 33) | (1 << 32))
#define TPS_REG_BOOT_STATUS_REV_ID_POS			(32)
#define TPS_REG_BOOT_STATUS_REV_ID(_s)	((TPS_REG_BOOT_STATUS_REV_ID_MASK & _s) >> TPS_REG_BOOT_STATUS_REV_ID_POS)

/* POWER STATUS REG */
#define TPS_REG_POWER_STATUS_POWER_CONNECTION_MASK	(1 << 0)
#define TPS_REG_POWER_STATUS_POWER_CONNECTION_POS	(0)
#define TPS_REG_POWER_STATUS_POWER_CONNECTION(_s)	((TPS_REG_POWER_STATUS_POWER_CONNECTION_MASK & _s) >> TPS_REG_POWER_STATUS_POWER_CONNECTION_POS)
#define TPS_REG_POWER_STATUS_SOURCE_SINK_MASK		(1 << 1)
#define TPS_REG_POWER_STATUS_SOURCE_SINK_POS		(1)
#define TPS_REG_POWER_STATUS_SOURCE_SINK(_s)	((TPS_REG_POWER_STATUS_SOURCE_SINK_MASK & _s) >> TPS_REG_POWER_STATUS_SOURCE_SINK_POS)
#define TPS_REG_POWER_STATUS_TYPEC_CURRENT_MASK	((1 << 3) | (1 << 2))
#define TPS_REG_POWER_STATUS_TYPEC_CURRENT_POS	(2)
#define TPS_REG_POWER_STATUS_TYPEC_CURRENT(_s)	((TPS_REG_POWER_STATUS_TYPEC_CURRENT_MASK & _s) >> TPS_REG_POWER_STATUS_TYPEC_CURRENT_POS)
#define TPS_REG_POWER_STATUS_CHARGER_DETECT_MASK	((1 << 7) | (1 << 6) | (1 << 5) | (1 << 4))
#define TPS_REG_POWER_STATUS_CHARGER_DETECT_POS		(4)
#define TPS_REG_POWER_STATUS_CHARGER_DETECT(_s)	((TPS_REG_POWER_STATUS_CHARGER_DETECT_MASK & _s) >> TPS_REG_POWER_STATUS_CHARGER_DETECT_POS)
#define TPS_REG_POWER_STATUS_CHARGER_ADVERTISE_MASK	((1 << 9) | (1 << 8))
#define TPS_REG_POWER_STATUS_CHARGER_ADVERTISE_POS	(8)
#define TPS_REG_POWER_STATUS_CHARGER_ADVERTISE(_s)	((TPS_REG_POWER_STATUS_CHARGER_ADVERTISE_MASK & _s) >> TPS_REG_POWER_STATUS_CHARGER_ADVERTISE_POS)

/* PD STATUS REG */
#define TPS_REG_PD_STATUS_CC_PULL_UP_MASK		((1 << 3) | (1 << 2))
#define TPS_REG_PD_STATUS_CC_PULL_UP_POS		(2)
#define TPS_REG_PD_STATUS_CC_PULL_UP(_s)	((TPS_REG_PD_STATUS_CC_PULL_UP_MASK & _s) >> TPS_REG_PD_STATUS_CC_PULL_UP_POS)
#define TPS_REG_PD_STATUS_PORT_TYPE_MASK		((1 << 5) | (1 << 4))
#define TPS_REG_PD_STATUS_PORT_TYPE_POS			(4)
#define TPS_REG_PD_STATUS_PORT_TYPE(_s)	((TPS_REG_PD_STATUS_PORT_TYPE_MASK & _s) >> TPS_REG_PD_STATUS_PORT_TYPE_POS)
#define TPS_REG_PD_STATUS_PERESENT_PD_ROLE_MASK		(1 << 6)
#define TPS_REG_PD_STATUS_PERESENT_PD_ROLE_POS		(6)
#define TPS_REG_PD_STATUS_PD_CONN(_s)	((TPS_REG_PD_STATUS_PERESENT_PD_ROLE_MASK & _s) >> TPS_REG_PD_STATUS_PERESENT_PD_ROLE_POS)
#define TPS_REG_PD_STATUS_SOFT_RESET_DETAILS_MASK	((1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8))
#define TPS_REG_PD_STATUS_SOFT_RESET_DETAILS_POS	(8)
#define TPS_REG_PD_STATUS_SOFT_RESET_DETAILS(_s)	((TPS_REG_PD_STATUS_SOFT_RESET_DETAILS_MASK & _s) >> TPS_REG_PD_STATUS_SOFT_RESET_DETAILS_POS)
#define TPS_REG_PD_STATUS_HARD_RESET_DETAILS_MASK	((1 << 21) | (1 << 20) | (1 << 19) | (1 << 18) | (1 << 17) | (1 << 16))
#define TPS_REG_PD_STATUS_HARD_RESET_DETAILS_POS	(16)
#define TPS_REG_PD_STATUS_HARD_RESET_DETAILS(_s)	((TPS_REG_PD_STATUS_HARD_RESET_DETAILS_MASK & _s) >> TPS_REG_PD_STATUS_HARD_RESET_DETAILS_POS)
#define TPS_REG_PD_STATUS_ERR_RECOVERY_DETAILS_MASK	((1 << 27) | (1 << 26) | (1 << 25) | (1 << 24) | (1 << 23) | (1 << 22))
#define TPS_REG_PD_STATUS_ERR_RECOVERY_DETAILS_POS	(22)
#define TPS_REG_PD_STATUS_ERR_RECOVERY_DETAILS(_s)	((TPS_REG_PD_STATUS_ERR_RECOVERY_DETAILS_MASK & _s) >> TPS_REG_PD_STATUS_ERR_RECOVERY_DETAILS_POS)
#define TPS_REG_PD_STATUS_DATA_RESET_DETAILS_MASK	((1 << 30) | (1 << 29) | (1 << 28))
#define TPS_REG_PD_STATUS_DATA_RESET_DETAILS_POS	(28)
#define TPS_REG_PD_STATUS_DATA_RESET_DETAILS(_s)	((TPS_REG_PD_STATUS_DATA_RESET_DETAILS_MASK & _s) >> TPS_REG_PD_STATUS_DATA_RESET_DETAILS_POS)

/* TX_SOURCE_CAPS REG */
#define TPS_PDO_NUM_VALID_PDOS_MASK	((1 << 2) | (1 << 1) | (1 << 0))
#define TPS_PDO_NUM_VALID_PDOS_POS	(0)
#define TPS_PDO_NUM_VALID_PDOS(_header)	((TPS_PDO_NUM_VALID_PDOS_MASK & _header) >> TPS_PDO_NUM_VALID_PDOS_POS)
#define TPS_PDO_MAX_CURRENT_MASK	(0x03FF)
#define TPS_PDO_MAX_CURRENT_POS		(0)
#define TPS_PDO_MAX_CURRENT(_pdo)	((TPS_PDO_MAX_CURRENT_MASK & _pdo) >> TPS_PDO_MAX_CURRENT_POS)

#define TPS_PORT_TYPE_SINK_SOURCE	0
#define TPS_PORT_TYPE_SINK			1
#define TPS_PORT_TYPE_SOURCE		2
#define TPS_PORT_TYPE_SOURCE_SINK	3

#define TPS_TYPEC_CURRENT_USB_DEFAULT	0
#define TPS_TYPEC_CURRENT_1_5_A		1
#define TPS_TYPEC_CURRENT_3_0_A		2
#define TPS_TYPEC_CURRENT_PD		3

enum usb_role {
	USB_ROLE_NONE,
	USB_ROLE_HOST,
	USB_ROLE_DEVICE,
};

enum typec_data_role {
	TYPEC_DEVICE,
	TYPEC_HOST,
};

enum power_supply_property {
	POWER_SUPPLY_PROP_ONLINE,
	POWER_SUPPLY_PROP_USB_TYPE,
	POWER_SUPPLY_PROP_CURRENT_MAX,
};

enum power_supply_type {
	POWER_SUPPLY_USB_TYPE_C,
	POWER_SUPPLY_USB_TYPE_PD,
};

enum typec_role {
	TYPEC_SINK,
	TYPEC_SOURCE,
};

#endif /* __TPS25750_H__ */
